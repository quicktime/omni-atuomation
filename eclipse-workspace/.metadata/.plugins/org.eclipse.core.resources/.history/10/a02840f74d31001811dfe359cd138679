package testcontrol.D27351;

import helper.Assays;
import helper.CompareErrors;
import helper.StringManipulation;
import mobile.MobileTestErrors;
import mobile.MobileTests;
import mobile.MobileWaits;
import mobile.OmniErrors;
import mobile.PendingCommands;
import nfc.NFCTools;
import mobile.BaseState;
import mobile.HandHeld;
import postman.PostmanGet;
import postman.PostmanPut;
import putty.OmniReset;
import putty.Putty;
import sheet.LineCount;
import sheet.SheetTestErrors;
import testcontrol.Main;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.IOException;

import com.borland.silktest.jtf.Utils;
import com.borland.silktest.jtf.internal.Agent;

import c360.c360Errors;
import dterm.DTermNFC;

import com.borland.silktest.jtf.Desktop;
import com.microfocus.silktest.jtf.mobile.MobileObject;
import com.borland.silktest.jtf.Window;
import com.borland.silktest.jtf.PushToolItem;
import com.borland.silktest.jtf.Tree;
import com.borland.silktest.jtf.VerticalScrollBar;
import com.borland.silktest.jtf.win32.AccessibleControl;
import com.borland.silktest.jtf.common.types.MouseButton;
import com.borland.silktest.jtf.common.types.Point;
import com.borland.silktest.jtf.PushButton;

/**
 * Handles all test cases for the Instrument Errors tab
 * @author Brendan Dolan
 * @date Created on: Feb 21, 2018
 */
public class InstrumentErrors {

	/**
	 * Runs test cases ie1 through ie7. Assay with 2 temp cycles.
	 */
	public static void ie1_ie7Run() {
		String sheet = "\\\\SWATTESTEXCC\\Omni_Validation_Scripts\\sheets\\instrument error\\instrument errors\\ie1_ie7.csv";
		try { // to catch IOExceptions from sheet functions
			for (int line = 0; line < LineCount.lineCount(sheet); line++) { // loops # of rows (excluding header)
				Main.debug.LOG("Starting test case ie" + (1 + line) + "...");

				// literals
				boolean errorsExist			= false;
				String assayName 			= Assays.HIV_1_Qual_v2[0];
				String nfcTag				= Assays.HIV_1_Qual_v2[1];
				String assayLocator			= Assays.HIV_1_Qual_v2[2];
				String sampleID 			= null;
				String mobileErrorMessage 	= null;
				String mobileErrors 		= null;
				String mobileErrorCode 		= null;
				String postmanErrorCode 	= null;
				String sendCode 			= SheetTestErrors.getErrorSendCode(sheet, line);
				String sheetErrorMessage 	= SheetTestErrors.getErrorMessage(sheet, line);
				String sheetErrors			= SheetTestErrors.getErrors(sheet, line);

				// commands
				PendingCommands.installAssay(assayName, assayLocator);
				NFCTools.writeTag(nfcTag);
				DTermNFC.setCartNFC(nfcTag);
				MobileTests.startTest();
				sampleID = MobileTests.sampleID; // test started, so sampleID has been generated
				MobileWaits.testStarts();
				PostmanPut.sendError(sendCode);
				MobileWaits.errorAppears();
				mobileErrorMessage = MobileTestErrors.getErrorMessage(); // error appears, so gather error message
				CompareErrors.compareErrorMessages(mobileErrorMessage, sheetErrorMessage);
				MobileWaits.testCompletion();
				mobileErrors = MobileTestErrors.getErrors(); // test ended, so gather errors from mobile
				mobileErrorCode = MobileTestErrors.getErrorNumber(); // test ended, so gather error code from mobile
				postmanErrorCode = PostmanGet.getTestErrorCode(sampleID); // test ended, so gather error code from postman
				CompareErrors.compareErrors(mobileErrors, sheetErrors);
				CompareErrors.compareMobilePostman(mobileErrorCode, postmanErrorCode);
				OmniReset.reset(); 

				Main.debug.LOG("Test case ie" + (1 + line) + " passed.\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Runs test cases ie8 through ie12. Non_Termination_Error assays
	 */
	public static void ie8_ie12Run() {
		String sheet = "./sheets/instrument error/instrument errors/ie8_ie12.csv";
		try {
			for (int line = 0; line < LineCount.lineCount(sheet); line++) {
				Main.debug.LOG("Starting test case ie" + (8 + line) + "...");
				
				// literals
				boolean errorsExist			= false;
				String assayName 			= Assays.HIV_1_Qual_v2[0];
				String nfcTag				= Assays.HIV_1_Qual_v2[1];
				String assayLocator			= Assays.HIV_1_Qual_v2[2];
				String sampleID 			= null;
				String mobileErrors 		= null;
				String mobileErrorCode 		= null;
				String postmanErrorCode 	= null;
				String sendCode			 	= SheetTestErrors.getErrorSendCode(sheet, line);
				String sheetErrors 			= SheetTestErrors.getErrors(sheet, line);
				
				// commands
				PendingCommands.installAssay(assayName, assayLocator);
				NFCTools.writeTag(nfcTag);
				DTermNFC.setCartNFC(nfcTag);
				MobileTests.startTest();
				sampleID = MobileTests.sampleID; // test started, so sampleID has been generated
				MobileWaits.errorAppears();
				errorsExist = MobileTestErrors.errorsExist(); 
				assertTrue(errorsExist); // returns true if error exists, breaks if no error exists
				MobileWaits.testCompletion();
				mobileErrors = MobileTestErrors.getErrors();
				sheetErrors = SheetTestErrors.getErrors(sheet, line);
				mobileErrorCode = MobileTestErrors.getErrorNumber(); // test ended, so gather error code from mobile
				postmanErrorCode = PostmanGet.getTestErrorCode(sampleID); // test ended, so gather error code from postman
				CompareErrors.compareErrors(mobileErrors, sheetErrors);
				CompareErrors.compareMobilePostman(mobileErrorCode, postmanErrorCode);
				OmniReset.reset();
				
				Main.debug.LOG("Test case ie" + (8 + line) + " passed.\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Test case ie13 - REMOVED
	 */
	
	/**
	 * Runs test case ie14 - NOT TESTED
	 */
	public static void ie14Run() {
		// Order valid test
		// Insert cartridge without NFC tag
		// Verify errors
	}
	
	/**
	 * Test case ie15 - REMOVED
	 */

	/**
	 * Runs test case ie16
	 */
	public static void ie16Run() {
		String sheet = "./sheets/instrument error/instrument errors/ie16.csv";
		try {
			for (int line = 0; line < LineCount.lineCount(sheet); line++) {
				Main.debug.LOG("Starting test case ie" + (16 + line) + "...");
				
				// literals
				boolean errorsExist			= false;
				String assayName 			= Assays.HIV_1_Qual_v2[0];
				String nfcTag				= Assays.HIV_1_Qual_v2[1];
				String assayLocator			= Assays.HIV_1_Qual_v2[2];
				String sampleID 			= null;
				String mobileErrors 		= null;
				String postmanErrorCode 	= null;
				String sendCode			 	= SheetTestErrors.getErrorSendCode(sheet, line);
				String sheetErrorCodeText	= SheetTestErrors.getErrorCodeText(sheet, line);
				String sheetErrorCode		= StringManipulation.errorCode(sheetErrorCodeText);
				String sheetErrors 			= SheetTestErrors.getErrors(sheet, line);
				
				// Mobile Device connected to c360
				PendingCommands.installAssay(assayName, assayLocator);
				NFCTools.writeTag(nfcTag);
				DTermNFC.setCartNFC(nfcTag);
				PostmanPut.sendError(sendCode);
				MobileTests.startTest();
				sampleID = MobileTests.sampleID; // test started, so sampleID has been generated
				MobileWaits.testCompletion();
				CompareErrors.compareErrors(mobileErrors, sheetErrors);
				c360Errors.errorsExist(); // returns true if errors exist in c360, breaks if they do not TODO make c360errors
				postmanErrorCode = PostmanGet.getModuleErrorCode();
				CompareErrors.compareErrorCode(postmanErrorCode, sheetErrorCode);
				OmniReset.reset();
				
				Main.debug.LOG("Test case ie" + (16 + line) + " passed.\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Runs test cases ie17 through 35
	 */
	public static void ie17_ie35Run() {
		String sheet = "./sheets/instrument error/instrument errors/ie17_ie35.csv";
		try {
			for (int line = 0; line < LineCount.lineCount(sheet); line++) {
				Main.debug.LOG("Starting test case ie" + (17 + line) + "...");
				
				// literals
				boolean errorsExist			= false;
				String sampleID 			= null;
				String omniErrors		 	= null;
				String omniErrorCode 		= null;
				String postmanErrorCode 	= null;
				String sendCode			 	= SheetTestErrors.getErrorSendCode(sheet, line);
				String sheetErrorCode		= SheetTestErrors.getErrorCode(sheet, line);
				String sheetErrors 			= SheetTestErrors.getErrors(sheet, line);
				
				// commands
				PostmanPut.sendError(sendCode);
				omniErrors = OmniErrors.getErrors();
				CompareErrors.compareErrors(omniErrors, sheetErrors);
				postmanErrorCode = PostmanGet.getModuleErrorCode();
				CompareErrors.compareErrorCode(postmanErrorCode, sheetErrorCode);
				OmniReset.reset();
				
				Main.debug.LOG("Test case ie" + (17 + line) + " passed.\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Runs test case 36 - NOT TESTED
	 */
	public static void ie36Run() {
		// sendCode
		// run test to completion
		// verify errors
		// postman compare code
		// reset
		// start test without errors
		// connected instrument, unplugged
		// postman GET module/
		// view powerStatus and batteryStatus
		// view battery symbol on APP
		// when battery <= 50%, plug in
		// postman GET module/
		// view battery symbol
	}
	
	/**
	 * Runs test cases 37 through 46
	 */
	public static void ie37_ie46Run() {
		String sheet = "./sheets/instrument error/instrument errors/ie37_46.csv";
		try {
			for (int line = 0; line < LineCount.lineCount(sheet); line++) {
				Main.debug.LOG("Starting test case ie" + (37 + line) + "...");
				
				// literals
				boolean errorsExist			= false;
				String sampleID 			= null;
				String omniErrors		 	= null;
				String omniErrorCode 		= null;
				String postmanErrorCode 	= null;
				String sendCode			 	= SheetTestErrors.getErrorSendCode(sheet, line);
				String sheetErrorCode		= SheetTestErrors.getErrorCode(sheet, line);
				String sheetErrors 			= SheetTestErrors.getErrors(sheet, line);
				
				// commands
				PostmanPut.sendError(sendCode);
				omniErrors = OmniErrors.getErrors();
				CompareErrors.compareErrors(omniErrors, sheetErrors);
				postmanErrorCode = PostmanGet.getModuleErrorCode();
				CompareErrors.compareErrorCode(postmanErrorCode, sheetErrorCode);
				OmniReset.reset();
				
				Main.debug.LOG("Test case ie" + (37 + line) + " passed.\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}